// 1. 이항 연산자 '+'와 문자열 연결
// 1-1. 피연산자 2개
alert('1' + 2); // 결과: 12
alert(2 + '1'); // 결과: 21

// 1-2. 피연산자 3개 이상
alert(2 + 2 + '1'); // 결과: 41 (문자열이 나오기 전까지 덧셈 실행)
alert(2 + '3' + 4); // 결과: 234


// 2. 단항 연산자 '+'와 숫자형 변환
// 2-1. 피연산자가 숫자형
let y = -2;
alert(+y); // 결과: -2 (영향없음)

// 2-2. 피연산자가 숫자형이 아님
alert(+true); // 결과: 1 (true를 숫자형으로 변환하면 1)
alert(+""); // 결과: 0 (빈문자열을 숫자형으로 변환하면 0)

let red = "3";
let blue = "9";
alert(red + blue); // 결과: 39 (문자열 자체로 연결)
alert(+red + +blue); // 결과: 12 (숫자로 변환이 먼저 이루어진 후 덧셈 실행)
alert(Number(red) + Number(blue)) // 결과: 12 (윗줄과 같은 의미)


// 3. 할당 연산자
// 3-1. 기본 형식
let a = 1;
let b = 2;
let c = 3 - (a = b + 1);

alert("a: " + a + ", c: " + c); // 결과: 3, 0 ('b+1' 값을 a에 먼저 할당 후 3과 계산한 결과를 c에 할당)

// 3-2. 체이닝
let d, e, f;
d = e = f = 2 + 3; // 가독성을 위해 문단을 나누는 것이 좋음

alert(d); // 결과: 5 (가장 마지막에 b값 할당 받음) 
alert(e); // 결과: 5 (c값을 할당 받음)
alert(f); // 결과: 5

// 3-3. 복합 할당 연산자
let n = 2;
n = n + 5; // n += 5 동일표현
n = n * 2; // n *= 2 동일표현
alert (n); // 결과: 14 (n = 2+5 -> n = 7*2 -> n = 14)

let m = 2;
m *= 3 + 5; // m = m * 8;
alert(m); // 결과: 16 (*=의 우측 먼저 계산)


// 4. 증가/감소 연산자
// 4-1. 전위형 1증가 
let pre_counter = 1;
alert(++pre_counter); // 결과: 2 (증가한 새로운 값 반환)
alert(2 * ++pre_counter); // 결과: 6 (= 2 * 3)

// 4-2. 후위형 1증가
let post_counter = 1;
alert(post_counter++); // 결과: 1 (기존 값 반환)
alert(2 * post_counter++) // 결과: 4 (= 2 * 2)


// 5. 쉼표 연산자
// 5-1. 괄호가 있을 경우
let x = (1 + 2, 3 + 4);
alert(x); // 결과: 7 (x = (3, 7) -> 1+2 계산 후 3+4가 계산되기 때문에 결과적으로 7 반환)

// 5-2. 괄호가 없는 경우
x = 1 + 2, 3 + 4
alert(x); // 결과: 3 (x = 3, 7 -> 할당 연산자가 쉼표 연산자보다 우선순위가 높기 때문에 7은 무시)


// 과제
// 1. 전위형과 후위형
let g = 1, h = 1;
let i = ++g;
let j = h++;
alert("i: " + i + ", j: " + j); // 결과: 2, 1

// 2. 할당 후 결과 예측하기
let k = 2;
let l = 1 + (k *= 2);
alert("l: " + l); // 결과: 5

// 3. 형 변환
// 더하기는 문자열을 합치고, 빼기는 숫자로 변환하여 연산
alert("" + 1 + 0); // 결과: 10
alert("" - 1 + 0); // 결과: -1 (0 -1 + 0)
alert(true + false); // 결과: 1 (1 + 0)
alert(6 / "3"); // 결과: 2 (6 / 3)
alert("2" * "3"); // 결과: 6 (2 * 3)
alert(4 + 5 + "px"); // 결과: 9px
alert("$" + 4 + 5); // 결과: $45
alert("4" - 2); // 결과: 2 (4 - 2)
alert("4px" - 2); // 결과: NaN
alert(7 / 0); // 결과: Infinity
alert("  -9  " + 5); // 결과:   -9  5
alert("  -9  " - 5); // 결과: -14 (-9 - 5)
alert(null + 1); // 결과: 1 (0 + 1)
alert(undefined + 1); // 결과: NaN
alert(" \t \n" - 2); // 결과: -2, 이유: 앞 뒤 공백 삭제 후, '\t'와 ' '과 '\n'으로 구성 -> 길이가 0인 문자열

// 4. 덧셈 고치기
let p = prompt("덧셈할 첫 번째 숫자를 입력해주세요.", 1);
let q = prompt("덧셈할 두 번째 숫자를 입력해주세요.", 2);
alert(p + q); // 결과: 12, 이유: prompt함수가 사용자 입력을 문자열로 변환하기 때문
alert(Number(p) + Number(q)); // 결과: 3

// Number()말고 다른 방법
// 1번
p = +prompt("덧셈할 첫 번째 숫자를 입력해주세요.", 1);
q = +prompt("덧셈할 두 번째 숫자를 입력해주세요.", 2);
// 2번
alert(+p + +q);